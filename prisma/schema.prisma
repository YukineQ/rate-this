// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  bio            String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Review {
  id       String @id @default(cuid())
  userId   String
  title    String
  creation String
  content  String
  rate     Int

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  tags ReviewTags[]
  images Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Image {
  id  String @id @default(cuid())
  url String

  reviewId String
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reviewId])
}

model Category {
  id     String   @id @default(cuid())
  name   String   @unique
  review Review[]
}

model ReviewTags {
  reviewId String
  tagId    String
  review   Review @relation(fields: [reviewId], references: [id])
  Tag      Tag    @relation(fields: [tagId], references: [id])

  @@id([reviewId, tagId])
}

model Tag {
  id      String       @id @default(cuid())
  name    String       @unique
  reviews ReviewTags[]
}
